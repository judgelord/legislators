[{"path":"/articles/legislators.html","id":"find-u-s--legislator-names-in-messy-text-with-typos-and-inconsistent-name-formats","dir":"Articles","previous_headings":"","what":"Find U.S. legislator names in messy text with typos and inconsistent name formats","title":"legislators","text":"Install package ","code":"devtools::install_github(\"judgelord/legislators\") library(legislators)"},{"path":"/articles/legislators.html","id":"data","dir":"Articles","previous_headings":"","what":"Data","title":"legislators","text":"package relies dataframe permutations names members Congress. dataframe builds basic structure voteview.com data, especially bioname field. corrections, constructs regular expression search pattern conditions pattern yield match (e.g., pattern unique match member Congress given Congress). pattern differs Congress Congress member move House Senate members similar names join leave Congress. Users can customize provided members data supply updated version extractMemberName(). searching text, several functions clean “fix” common human typos OCR errors frustrate matching. corrections currently supplied MemberNameTypos.R. future versions, typos supplied dataframe instead, types corrections (cleaning, typos, OCR errors) optional. Additionally, users able customize typos dataframe provide argument extractMemberName().","code":"data(\"members\")  members |> kable() data(\"typos\")  typos |> kable()"},{"path":"/articles/legislators.html","id":"basic-usage","dir":"Articles","previous_headings":"","what":"Basic Usage","title":"legislators","text":"main function extractMemberName() returns dataframe names ICPSR ID numbers members Congress supplied vector text. future, extractMemberName() may default returning list dataframes length supplied data example, can use extractMemberName() detect names members Congress text Congressional Record. Let’s start text Congressional Record 3/1/2007, scraped parsed using methods described . extremely simple example text strings containing names members Congress (speaker) short contain much text. However, extractMemberName() also capable searching longer much messier texts, including text names consistently formatted contain common typos introduced humans common OCR errors. Indeed, functions developed identify members Congress ugly text data like . better match member names, function currently requires either: column “congress” (can created date) vector congresses limit search (congresses)","code":"data(\"cr2007_03_01\")  cr2007_03_01 |> kable()"},{"path":"/articles/legislators.html","id":"extractmembername","dir":"Articles","previous_headings":"Basic Usage","what":"extractMemberName()","title":"legislators","text":"example, observations 110th Congress, search members served 110th. row’s speaker text contains one member case, data_row_id match_id . multiple members detected, may multiple matches per data_row_id. extractMemberName links detected name ICPSR IDs voteview.com, already information, like state district legislator detected text (scroll way right). data voteview.com sources can merged icpsr.","code":"cr2007_03_01$congress <- 110  # extract legislator names and match to voteview ICPSR numbers cr <- extractMemberName(data = cr2007_03_01,                          col_name = \"speaker\", # The text strings to search                         congresses = 110, # This argument is not required in this case because the data contain a \"congress\" column                         members = members # Member names augmented from voteview come with this package, but users can also supply a customised data frame                         ) #> Typos fixed in 5 seconds #> Searching  data for members of the 110th, n = 154 (123 distinct strings). #> Names matched in 7 seconds #> Joining, by = c(\"congress\", \"pattern\", \"first_name\", \"last_name\") cr |> kable()"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Devin Judge-Lord. Author, maintainer. Maggie Nead. Author.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Judge-Lord D, Nead M (2022). legislators: Find Legislator Names Messy Text. https://judgelord.github.io/legislators/, https://github.com/judgelord/legislators.","code":"@Manual{,   title = {legislators: Find Legislator Names in Messy Text},   author = {Devin Judge-Lord and Maggie Nead},   year = {2022},   note = {https://judgelord.github.io/legislators/, https://github.com/judgelord/legislators}, }"},{"path":[]},{"path":"/index.html","id":"installation","dir":"","previous_headings":"legislators: Find legislator names in messy text","what":"Installation","title":"Find Legislator Names in Messy Text","text":"","code":"devtools::install_github(\"judgelord/legislators\") library(legislators)"},{"path":"/index.html","id":"data","dir":"","previous_headings":"","what":"Data","title":"Find Legislator Names in Messy Text","text":"package relies dataframe (members) permutations names members Congress. dataframe builds basic structure voteview.com data, especially bioname field. corrections, constructs regular expression search pattern conditions pattern yield match (e.g., pattern unique match member Congress given Congress). pattern differs Congress Congress member move House Senate members similar names join leave Congress. Users can customize provided members data supply updated version extractMemberName(). searching text, several functions clean “fix” common human typos OCR errors frustrate matching. corrections currently supplied MemberNameTypos.R. future versions, typos supplied dataframe instead, types corrections (cleaning, typos, OCR errors) optional. Additionally, users can customize typos dataframe provide argument extractMemberName().","code":"data(\"members\")  members #> # A tibble: 49,938 × 9 #>    congress chamber   bioname                      pattern                                                                                         icpsr state_abbrev district_code first_name last_name #>       <dbl> <chr>     <chr>                        <chr>                                                                                           <dbl> <chr>                <dbl> <chr>      <chr>     #>  1      117 President TRUMP, Donald John           \"donald trump|donald john trump|\\\\bd trump|donald j trump|don trump|don john trump|don j trump… 99912 USA                      0 Donald     TRUMP     #>  2      117 President BIDEN, Joseph Robinette, Jr. \"joseph biden|joseph robinette biden|\\\\bj biden|joseph r biden|joe biden|joe robinette biden|j… 99913 USA                      0 Joseph     BIDEN     #>  3      117 House     ROGERS, Mike Dennis          \"mike rogers|mike dennis rogers|\\\\bm rogers|mike d rogers|michael rogers|michael dennis rogers… 20301 AL                       3 Mike       ROGERS    #>  4      117 House     SEWELL, Terri                \"terri sewell|\\\\bt sewell|terri a sewell|\\\\bna sewell|(^|senator |representative )sewell\\\\b|se… 21102 AL                       7 Terri      SEWELL    #>  5      117 House     BROOKS, Mo                   \"mo brooks|\\\\bm brooks|\\\\bna brooks|(^|senator |representative )brooks\\\\b|brooks, mo|brooks mo… 21193 AL                       5 Mo         BROOKS    #>  6      117 House     PALMER, Gary James           \"gary palmer|gary james palmer|\\\\bg palmer|gary j palmer|\\\\bna palmer|(^|senator |representati… 21500 AL                       6 Gary       PALMER    #>  7      117 House     CARL, Jerry L.               \"jerry carl|jerry l carl|\\\\bj carl|\\\\bna carl|(^|senator |representative )carl\\\\b.{1,4}al|carl… 22108 AL                       1 Jerry      CARL      #>  8      117 House     MOORE, Barry                 \"barry moore|\\\\bb moore.{1,4}al|(^|senator |representative )moore\\\\b.{1,4}al|moore, barry|moor… 22140 AL                       2 Barry      MOORE     #>  9      117 House     ADERHOLT, Robert             \"robert aderholt|\\\\br aderholt|robert b aderholt|bob aderholt|bob b aderholt|\\\\bb aderholt|(^|… 29701 AL                       4 Robert     ADERHOLT  #> 10      117 House     YOUNG, Donald Edwin          \"donald young|donald edwin young|\\\\bd young|donald e young|don young|don edwin young|don e you… 14066 AK                       1 Donald     YOUNG     #> # … with 49,928 more rows data(\"typos\")  typos #> # A tibble: 480 × 2 #>    typos                                                                                                  correct              #>    <chr>                                                                                                  <chr>                #>  1 ( 0 | 0, )                                                                                             \" o \"                #>  2 aaron( | [a-z]* )s chock($| |,|;)|s chock, aaron                                                       \"aaron schock\"       #>  3 adam( | [a-z]* )(schif|sdxiff)($| |,|;)|(schif|sdxiff), adam                                           \"adam schiff\"        #>  4 adrian( | [a-z]* )espaillat|espaillat, adrian|adriano( | [a-z]* )espaillet($| |,|;)|espaillet, adriano \"adriano espaillat\"  #>  5 al( | [a-z]* )fianken($| |,|;)|fianken, al                                                             \"al franken\"         #>  6 (alccc|ateee)( | [a-z]* )hastings|hastings, (alccc|ateee)                                              \"alcee hastings\"     #>  7 allyson( | [a-z]* )schwaltz($| |,|;)|schwaltz, allyson                                                 \"allyson schwartz\"   #>  8 allyson d schwartz|schwartz, allyson d                                                                 \"allyson y schwartz\" #>  9 ami( | [a-z]* )(beta|gera)($| |,|;)|(beta|gera), ami                                                   \"ami bera\"           #> 10 amy( | [a-z]* )klobachur|klobachar($| |,|;)|klobachur|klobachar, amy                                   \"amy klobuchar\"      #> # … with 470 more rows"},{"path":[]},{"path":"/index.html","id":"basic-usage","dir":"","previous_headings":"","what":"Basic Usage","title":"Find Legislator Names in Messy Text","text":"main function extractMemberName() returns dataframe names ICPSR ID numbers members Congress supplied vector text. future, extractMemberName() may default returning list dataframes length supplied data example, can use extractMemberName() detect names members Congress text Congressional Record. Let’s start text Congressional Record 3/1/2007, scraped parsed using methods described . extremely simple example text strings containing names members Congress (speaker) short contain much text. However, extractMemberName() can also search longer much messier texts, including text names consistently formatted contain common typos introduced humans common OCR errors. Indeed, functions developed identify members Congress ugly text data like . better match member names, function currently requires either: column “congress” (can created date) vector congresses limit search (congresses)","code":"data(\"cr2007_03_01\")  cr2007_03_01 #> # A tibble: 154 × 5 #>    date       speaker                             header                                                                                                                                   url   url_txt #>    <date>     <chr>                               <chr>                                                                                                                                    <chr> <chr>   #>  1 2007-03-01 HON. SAM GRAVES;Mr. GRAVES          RECOGNIZING JARRETT MUCK FOR ACHIEVING THE RANK OF EAGLE SCOUT; Congressional Record Vol. 153, No. 35                                    http… https:… #>  2 2007-03-01 HON. MARK UDALL;Mr. UDALL           INTRODUCING A CONCURRENT RESOLUTION HONORING THE 50TH ANNIVERSARY OF THE INTERNATIONAL GEOPHYSICAL YEAR (IGY); Congressional Record Vol… http… https:… #>  3 2007-03-01 HON. JAMES R. LANGEVIN;Mr. LANGEVIN BIOSURVEILLANCE ENHANCEMENT ACT OF 2007; Congressional Record Vol. 153, No. 35                                                           http… https:… #>  4 2007-03-01 HON. JIM COSTA;Mr. COSTA            A TRIBUTE TO THE LIFE OF MRS. VERNA DUTY; Congressional Record Vol. 153, No. 35                                                          http… https:… #>  5 2007-03-01 HON. SAM GRAVES;Mr. GRAVES          RECOGNIZING JARRETT MUCK FOR ACHIEVING THE RANK OF EAGLE SCOUT                                                                           http… https:… #>  6 2007-03-01 HON. SANFORD D. BISHOP;Mr. BISHOP   IN HONOR OF SYNOVUS BEING NAMED ONE OF THE BEST COMPANIES IN AMERICA; Congressional Record Vol. 153, No. 35                              http… https:… #>  7 2007-03-01 HON. EDOLPHUS TOWNS;Mr. TOWNS       NEW PUNJAB CHIEF MINISTER URGED TO WORK FOR SIKH SOVEREIGNTY; Congressional Record Vol. 153, No. 35                                      http… https:… #>  8 2007-03-01 HON. TOM DAVIS;Mr. TOM DAVIS        HONORING THE 30TH ANNIVERSARY OF THE BAILEY'S CROSSROADS ROTARY CLUB; Congressional Record Vol. 153, No. 35                              http… https:… #>  9 2007-03-01 HON. SAM GRAVES;Mr. GRAVES          RECOGNIZING BRIAN PATRICK WESSLING FOR ACHIEVING THE RANK OF EAGLE SCOUT; Congressional Record Vol. 153, No. 35                          http… https:… #> 10 2007-03-01 HON. MARK UDALL;Mr. UDALL           INTRODUCTION OF ROYALTY-IN-KIND FOR ENERGY ASSISTANCE LEGISLATION; Congressional Record Vol. 153, No. 35                                 http… https:… #> # … with 144 more rows head(cr2007_03_01$url) #> [1] \"https://www.congress.gov/congressional-record/2007/03/01/extensions-of-remarks-section/article/E431-2\" #> [2] \"https://www.congress.gov/congressional-record/2007/03/01/extensions-of-remarks-section/article/E431-3\" #> [3] \"https://www.congress.gov/congressional-record/2007/03/01/extensions-of-remarks-section/article/E431-4\" #> [4] \"https://www.congress.gov/congressional-record/2007/03/01/extensions-of-remarks-section/article/E431-5\" #> [5] \"https://www.congress.gov/congressional-record/2007/03/01/extensions-of-remarks-section/article/E431-1\" #> [6] \"https://www.congress.gov/congressional-record/2007/03/01/extensions-of-remarks-section/article/E432-2\""},{"path":"/index.html","id":"extractmembername","dir":"","previous_headings":"Basic Usage","what":"extractMemberName()","title":"Find Legislator Names in Messy Text","text":"example, observations 110th Congress, search members served 110th. row’s speaker text contains one member case, data_row_id match_id . multiple members detected, may multiple matches per data_row_id. extractMemberName links detected name ICPSR IDs voteview.com, already information, like state district legislator detected text (scroll right).","code":"cr2007_03_01$congress <- 110  # extract legislator names and match to voteview ICPSR numbers cr <- extractMemberName(data = cr2007_03_01,                          col_name = \"speaker\", # The text strings to search                         congresses = 110, # This argument is not required in this case because the data contain a \"congress\" column                         members = members # Member names augmented from voteview come with this package, but users can also supply a customized data frame                         ) #> Typos fixed in 5 seconds  #> Searching  data for members of the 110th, n = 154 (123 distinct strings).  #> Names matched in 7 seconds  #> Joining, by = c(\"congress\", \"pattern\", \"first_name\", \"last_name\") cr #> # A tibble: 193 × 17 #>    data_row_id match_id icpsr bioname                    string                         pattern chamber congress date       speaker header url   url_txt first_name last_name state_abbrev district_code #>    <chr>       <chr>    <dbl> <chr>                      <chr>                          <chr>   <chr>      <dbl> <date>     <chr>   <chr>  <chr> <chr>   <chr>      <chr>     <chr>                <dbl> #>  1 000001      000001   20124 GRAVES, Samuel             hon sam graves;mr graves       \"samue… House        110 2007-03-01 HON. S… RECOG… http… https:… Samuel     GRAVES    MO                       6 #>  2 000002      000002   29906 UDALL, Mark                hon mark udall;mr udall        \"mark … House        110 2007-03-01 HON. M… INTRO… http… https:… Mark       UDALL     CO                       2 #>  3 000003      000003   20136 LANGEVIN, James            hon james r langevin;mr lange… \"james… House        110 2007-03-01 HON. J… BIOSU… http… https:… James      LANGEVIN  RI                       2 #>  4 000004      000004   20501 COSTA, Jim                 hon jim costa;mr costa         \"jim c… House        110 2007-03-01 HON. J… A TRI… http… https:… Jim        COSTA     CA                      20 #>  5 000005      000005   20124 GRAVES, Samuel             hon sam graves;mr graves       \"samue… House        110 2007-03-01 HON. S… RECOG… http… https:… Samuel     GRAVES    MO                       6 #>  6 000006      000006   29339 BISHOP, Sanford Dixon, Jr. hon sanford d bishop;mr bishop \"sanfo… House        110 2007-03-01 HON. S… IN HO… http… https:… Sanford    BISHOP    GA                       2 #>  7 000007      000007   15072 TOWNS, Edolphus            hon edolphus towns;mr towns    \"edolp… House        110 2007-03-01 HON. E… NEW P… http… https:… Edolphus   TOWNS     NY                      10 #>  8 000008      000008   29576 DAVIS, Thomas M., III      hon tom davis;mr tom davis     \"thoma… House        110 2007-03-01 HON. T… HONOR… http… https:… Thomas     DAVIS     VA                      11 #>  9 000009      000009   20124 GRAVES, Samuel             hon sam graves;mr graves       \"samue… House        110 2007-03-01 HON. S… RECOG… http… https:… Samuel     GRAVES    MO                       6 #> 10 000010      000010   29906 UDALL, Mark                hon mark udall;mr udall        \"mark … House        110 2007-03-01 HON. M… INTRO… http… https:… Mark       UDALL     CO                       2 #> # … with 183 more rows"},{"path":[]},{"path":"/index.html","id":"dynamic-data","dir":"","previous_headings":"TODO","what":"Dynamic data","title":"Find Legislator Names in Messy Text","text":"make kind version-controlled spreadsheet users can submit additional nicknames, maiden names, etc. augment voteview data. currently done data/make_members/nameCongress.R, easy users edit re-make regex table. make sort version-controlled spreadsheet users can submit common typos find. Currently, typos.R generates typos.rda, loaded package.","code":""},{"path":"/index.html","id":"vignettes","dir":"","previous_headings":"TODO","what":"Vignettes","title":"Find Legislator Names in Messy Text","text":"Add vignette using messy OCRed legislator letters FERC replication data “Legislator Advocacy Behalf Constituents Corporate Donors” Add vignette using public comment data (sparse legislator names)","code":""},{"path":"/index.html","id":"functions","dir":"","previous_headings":"TODO","what":"Functions","title":"Find Legislator Names in Messy Text","text":"extractMemberName() needs options supply custom typos additions main regex table correcting OCR errors typos optional extractMemberName() integrate congress /congressData packages. example, may want function (augmentCongress augment_legislators?) join identifiers datasets ICPSR numbers. Perhaps best left users using congress package. Additionally, committees.R provides crosswalk Stewart ICPSR numbers","code":""},{"path":"/index.html","id":"documentation","dir":"","previous_headings":"TODO","what":"Documentation","title":"Find Legislator Names in Messy Text","text":"Document helper functions extractMemberName() Document additional functions help prep text best matching Document example data (including FERC public comment data new vignettes)","code":""},{"path":[]},{"path":"/reference/extractMemberName.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Detect legislator names in messy text\n — extractMemberName","text":"","code":"extractMemberName(data, members = members, col_name, congresses = unique(data$congress))"},{"path":"/reference/extractMemberName.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Detect legislator names in messy text\n — extractMemberName","text":"data  members  col_name  congresses","code":""},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":"/reference/extractMemberName.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Detect legislator names in messy text\n — extractMemberName","text":"","code":"##---- Should be DIRECTLY executable !! ---- ##-- ==>  Define data, use random, ##--  or do  help(data=index)  for the standard data sets.  ## The function is currently defined as function (data, members = members, col_name, congresses = unique(data$congress)) {     data %<>% mutate(string = data[[col_name]])     if (\"chamber\" %in% names(data)) {         data %<>% mutate(string = ifelse(!is.na(chamber), paste(chamber,             string) %>% str_replace(\"House\", \"Represenative\") %>%             str_replace(\"Senate\", \"Senator\"), string))         data %<>% select(-chamber)     }     if (\"state\" %in% names(data)) {         data %<>% mutate(string = ifelse(!is.na(state), paste(string,             \"-\", stateFromFull(state)), string))         data %<>% select(-state)     }     t <- Sys.time()     if (!\"data_id\" %in% names(data)) {         data$data_id <- 1:nrow(data)     }     data$data_id %<>% str_squish() %>% as.numeric()     data$ID <- 1:nrow(data)     data %<>% mutate(data_id = coalesce(data_id, ID) %>% as.numeric())     data$data_id %<>% formatC(width = 6, flag = \"0\", format = \"fg\")     data$congress %<>% replace_na(0) %>% as.numeric() %>% replace_na(0) %>%         as.numeric()     data %<>% mutate(last_name = NA, first_name = NA, pattern = NA) %>%         select(-first_name, -last_name, -pattern)     data$string %<>% cleanFROMcolumn()     data$string %<>% ocr.errors()     data$string %<>% tolower() %>% str_replace(\"senator senator\",         \"senator\") %>% str_replace(\"represenative representative\",         \"representative\")     data$string %<>% str_replace(\"na politano\", \"napolitano\")     data$string %<>% str_remove(\"^na \")     data$string %<>% str_remove(\"^na \")     data$string %<>% str_replace(\"han na\\b\", \"hanna\")     data$string %<>% str_remove_all(\"\\bna\\b\")     data$string %<>% str_squish()     data$string %<>% str_replace(\" ,\", \", \")     data$string %<>% str_squish()     data$string %<>% replace_na(\"\")     for (i in 1:dim(typos)[1]) {         r <- typos$correct[i]         p <- typos$typos[i]         data %<>% mutate(string = string %>% purrr::map_chr(str_replace,             pattern = p, replacement = r %>% paste(\"\")))     }     data$string %<>% str_replace(\" ,\", \", \") %>% str_squish()     base::message(paste(\"Typos fixed in\", round(Sys.time() -         t), \"seconds\"))     t <- Sys.time()     data <- map_dfr(congresses, extractNamesPerCongress, data = data,         members = members)     base::message(paste(\"Names matched in\", round(Sys.time() -         t), \"seconds\"))     data %<>% distinct()     data$ID <- 1:nrow(data) %>% formatC(width = 6, flag = \"0\")     data %<>% left_join(members %>% select(icpsr, pattern, bioname,         first_name, last_name, congress, chamber, state) %>%         distinct()) %>% distinct()     data$icpsr %<>% as.numeric()     data %<>% select(data_row_id = data_id, match_id = ID, icpsr,         bioname, string, pattern, chamber, congress, everything())     return(data)   } #> function (data, members = members, col_name, congresses = unique(data$congress)) #> { #>     data %<>% mutate(string = data[[col_name]]) #>     if (\"chamber\" %in% names(data)) { #>         data %<>% mutate(string = ifelse(!is.na(chamber), paste(chamber, #>             string) %>% str_replace(\"House\", \"Represenative\") %>% #>             str_replace(\"Senate\", \"Senator\"), string)) #>         data %<>% select(-chamber) #>     } #>     if (\"state\" %in% names(data)) { #>         data %<>% mutate(string = ifelse(!is.na(state), paste(string, #>             \"-\", stateFromFull(state)), string)) #>         data %<>% select(-state) #>     } #>     t <- Sys.time() #>     if (!\"data_id\" %in% names(data)) { #>         data$data_id <- 1:nrow(data) #>     } #>     data$data_id %<>% str_squish() %>% as.numeric() #>     data$ID <- 1:nrow(data) #>     data %<>% mutate(data_id = coalesce(data_id, ID) %>% as.numeric()) #>     data$data_id %<>% formatC(width = 6, flag = \"0\", format = \"fg\") #>     data$congress %<>% replace_na(0) %>% as.numeric() %>% replace_na(0) %>% #>         as.numeric() #>     data %<>% mutate(last_name = NA, first_name = NA, pattern = NA) %>% #>         select(-first_name, -last_name, -pattern) #>     data$string %<>% cleanFROMcolumn() #>     data$string %<>% ocr.errors() #>     data$string %<>% tolower() %>% str_replace(\"senator senator\", #>         \"senator\") %>% str_replace(\"represenative representative\", #>         \"representative\") #>     data$string %<>% str_replace(\"na politano\", \"napolitano\") #>     data$string %<>% str_remove(\"^na \") #>     data$string %<>% str_remove(\"^na \") #>     data$string %<>% str_replace(\"han na\\b\", \"hanna\") #>     data$string %<>% str_remove_all(\"\\bna\\b\") #>     data$string %<>% str_squish() #>     data$string %<>% str_replace(\" ,\", \", \") #>     data$string %<>% str_squish() #>     data$string %<>% replace_na(\"\") #>     for (i in 1:dim(typos)[1]) { #>         r <- typos$correct[i] #>         p <- typos$typos[i] #>         data %<>% mutate(string = string %>% purrr::map_chr(str_replace, #>             pattern = p, replacement = r %>% paste(\"\"))) #>     } #>     data$string %<>% str_replace(\" ,\", \", \") %>% str_squish() #>     base::message(paste(\"Typos fixed in\", round(Sys.time() - #>         t), \"seconds\")) #>     t <- Sys.time() #>     data <- map_dfr(congresses, extractNamesPerCongress, data = data, #>         members = members) #>     base::message(paste(\"Names matched in\", round(Sys.time() - #>         t), \"seconds\")) #>     data %<>% distinct() #>     data$ID <- 1:nrow(data) %>% formatC(width = 6, flag = \"0\") #>     data %<>% left_join(members %>% select(icpsr, pattern, bioname, #>         first_name, last_name, congress, chamber, state) %>% #>         distinct()) %>% distinct() #>     data$icpsr %<>% as.numeric() #>     data %<>% select(data_row_id = data_id, match_id = ID, icpsr, #>         bioname, string, pattern, chamber, congress, everything()) #>     return(data) #>   } #> <environment: 0x12113bf90>"}]
